{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "Game.svelte"
  ],
  "sourcesContent": [
    "<script>\nimport Game from './Game.svelte'\n\nconst retention = 5000; // how long ticks are preserved\nconst width = 500; // svg size\nconst height = 200;\n\nlet game;\n\nlet ticks = new Set();\nfunction addOne() {\n\tconst now = Date.now();\n\tticks.add(now);\n\tticks = ticks;\n\tsetTimeout(() => {\n\t\tticks.delete(now);\n\t\tticks = ticks;\n\t}, retention+100);\n\n\tconst angle = now % 20 / 20 * Math.PI * 2;\n\tgame.push(Math.cos(angle), Math.sin(angle));\n}\nlet ticksNormalized = [];\nfunction update() {\n\tconst now = Date.now();\n\tticksNormalized = Array.from(ticks).map(x => { return {\n\t\traw: x,\n\t\tprogress: (now - x) / retention,\n\t\trotation: x % 20 / 20,\n\t}; });\n\trequestAnimationFrame(update);\n}\nrequestAnimationFrame(update);\n</script>\n\n<header>\n<h1>Spiking non-neural non-network!</h1>\n<button tabindex=0 on:click={addOne}>Add One</button>\n</header>\n\n<main class=\"grid\">\n<div class=\"column\">\n\t<h2>Ticks, tabulated</h2>\n\t<ol>\n\t\t{#each Array.from(ticks) as x}\n\t\t\t<li>{x}</li>\n\t\t{/each}\n\t</ol>\n</div>\n<div class=\"column\">\n\t<h2>Ticks, visualized</h2>\n\t<svg width={width} height={height}>\n\t\t<line x1=0 y1={height/2} x2={width} y2={height/2} stroke=\"black\" />\n\t\t{#each ticksNormalized as tick}\n\t\t\t<line x1=0 y1=-20 x2=0 y2=20 stroke=\"black\" transform=\"translate({tick.progress*width}, {height/2}) rotate({20+tick.rotation*20})\"/>\n\t\t{/each}\n\t</svg>\n</div>\n<div class=\"column utd\">\n\t<h2>Ticks, streamlined</h2>\n\t<svg width=40 height=200>\n\t\t<line x1=20 y1=0 x2=20 y2=200 stroke=\"black\" />\n\t\t{#each ticksNormalized as tick}\n\t\t\t<line y1=0 x1=-10 y2=0 x2=10 stroke=\"black\" transform=\"translate(20, {tick.progress*200}) rotate({20+tick.rotation*20})\"/>\n\t\t{/each}\n\t</svg>\n</div>\n</main>\n\n<footer class=\"grid\">\n<div class=\"column\">\n\t<h2>Bouncing ball</h2>\n\t<Game bind:this={game}/>\n</div>\n<div class=\"column\">\n\t<h2>Ticks, together</h2>\n\t<svg width={40+100} height=400>\n\t\t<line x1={20+80} y1=0 x2={20+80} y2=400 stroke=\"black\" />\n\t\t{#each ticksNormalized as tick}\n\t\t<g transform=\"translate({20+80}, {tick.progress*400}) rotate({(tick.rotation*2-1) * 10 * Math.max(1, game.speed())})\">\n\t\t\t<line x1=-80 y1=0 x2=0 y2=0 stroke=\"black\"/>\n\t\t\t<text x=30 y=0 text-anchor=\"end\">{String(tick.raw).substr(-4)}</text>\n\t\t</g>\n\t\t{/each}\n\t</svg>\n</div>\n</footer>\n\n<style>\nheader button {\n\tdisplay: block;\n\twidth: 100vw;\n}\n.grid {\n\tdisplay: grid;\n\tgrid-auto-columns: auto;\n\tgrid-auto-flow: column;\n\tgrid-template-columns: 1fr;\n}\nmain ol {\n\theight: 200px;\n\toverflow-y: scroll;\n}\n.column {\n\tmargin: 1rem;\n}\n.utd {\n\twriting-mode: vertical-rl;\n}\n.right {\n\ttext-align: right;\n}\n</style>",
    "<script>\nconst ballr = 4;\nconst initSpeed = 1;\nconst damping = 0.999;\nlet ballx = 50, bally = 50;\n\nconst startingAngle = Math.random() * 2 * Math.PI;\nlet vx = Math.cos(startingAngle) * initSpeed, vy = Math.sin(startingAngle) * initSpeed;\n\nfunction update() {\n    ballx += vx;\n    bally += vy;\n    if (ballx < ballr && vx < 0) {\n        vx = -vx;\n        ballx += (ballr - ballx) * 2;\n    }\n    if (ballx > 100 - ballr && vx > 0) {\n        vx = -vx;\n        ballx -= (ballx - 100 + ballr) * 2;\n    }\n    if (bally < ballr && vy < 0) {\n        vy = -vy;\n        bally += (ballr - bally) * 2;\n    }\n    if (bally > 100 - ballr && vy > 0) {\n        vy = -vy;\n        bally -= (bally - 100 + ballr) * 2;\n    }\n    if (speed() > 1) {\n        vx *= damping;\n        vy *= damping;\n    }\n    requestAnimationFrame(update);\n}\nrequestAnimationFrame(update);\n\nexport function push(ax, ay) {\n    vx += ax;\n    vy += ay;\n}\n\nexport function speed() {\n    return Math.sqrt(vx**2 + vy**2)\n}\n</script>\n\n<svg width=400 height=400 viewbox=\"-5 -5 110 110\" fill=\"none\" stroke=\"black\" stroke-width=\"0.5\">\n    <rect x=0 y=0 width=100 height=100/>\n    <circle cx={ballx} cy={bally} r={ballr}></circle>\n</svg>\n\n<style>\nsvg {\n    box-shadow: rgba(0,0,0, 0.3) 0 0 8px;\n}\ncircle {\n    transition-property: cx, cy 0.14s linear;\n}\n</style>"
  ],
  "names": [],
  "mappings": "AAyFA,qBAAM,CAAC,MAAM,eAAC,CAAC,AACd,OAAO,CAAE,KAAK,CACd,KAAK,CAAE,KAAK,AACb,CAAC,AACD,KAAK,8BAAC,CAAC,AACN,OAAO,CAAE,IAAI,CACb,iBAAiB,CAAE,IAAI,CACvB,cAAc,CAAE,MAAM,CACtB,qBAAqB,CAAE,GAAG,AAC3B,CAAC,AACD,mBAAI,CAAC,EAAE,eAAC,CAAC,AACR,MAAM,CAAE,KAAK,CACb,UAAU,CAAE,MAAM,AACnB,CAAC,AACD,OAAO,8BAAC,CAAC,AACR,MAAM,CAAE,IAAI,AACb,CAAC,AACD,IAAI,8BAAC,CAAC,AACL,YAAY,CAAE,WAAW,AAC1B,CAAC;ACxDD,GAAG,cAAC,CAAC,AACD,UAAU,CAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,AACxC,CAAC,AACD,MAAM,cAAC,CAAC,AACJ,mBAAmB,CAAE,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,AAC5C,CAAC"
}